{"version":3,"sources":["components/Header.jsx","components/Posts.jsx","components/PostsForm.jsx","App.jsx","index.js"],"names":["Header","className","SvgContainer","styled","div","Posts","post","posts","changePosts","useState","newPost","editNewPost","text","editingText","changeEditingText","title","editingTitle","changeEditingTitle","editPostOnChange","e","target","name","value","deletePost","id","filter","deleteAlert","Swal","fire","showCancelButton","confirmButtonText","cancelButtonText","cancelButtonColor","confirmButtonColor","icon","then","result","dismiss","DismissReason","cancel","showConfirmButton","isConfirmed","faTimes","color","size","onClick","faEdit","action","onSubmit","newText","newTitle","preventDefault","map","htmlFor","type","onChange","placeholder","date","author","StyledForm","form","InputFormContainer","StyledInputsForPosts","input","props","PostsForm","changeTitle","changeText","changeAuthor","sDay","Date","toLocaleDateString","day","month","year","handleOnChange","alert","length","uuidv4","App","savedPosts","localStorage","getItem","JSON","parse","useEffect","setItem","stringify","console","log","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.60b11742.chunk.js","sourcesContent":["import React from 'react'\n\nconst Header = () => {\n    return(\n        <>\n            <header>\n                <h1 className=\"header__title\">Your online diary!</h1>\n            </header>\n        </>\n    )\n}\n\nexport default Header","import React, {useState} from 'react'\nimport styled from 'styled-components';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTimes, faEdit } from '@fortawesome/free-solid-svg-icons';\nimport Swal from 'sweetalert2';\n\nconst Posts = ({post, posts, changePosts}) => {\n\n\n    const [newPost, editNewPost] = useState(false)\n    const [editingText, changeEditingText] = useState(post.text)\n    const [editingTitle, changeEditingTitle] = useState(post.title)\n\n    const editPost = (id, newText, newTitle) => {\n        changePosts(posts.map((post) => {\n            if(post.id === id){\n                return {...post, text: newText, title: newTitle}\n            }\n            return post;\n        }))\n    }\n\n    const editPostOnChange = (e) => {\n        switch (e.target.name) {\n            case 'editing-text':\n                    changeEditingText(e.target.value)\n                break;\n            case 'editing-title':\n                changeEditingTitle(e.target.value)\n            default:\n                break;\n        }\n    }\n\n    const editPostOnSubmit = (e) => {\n        e.preventDefault()\n        editPost(post.id, editingText, editingTitle)\n        editNewPost(!newPost)\n    }\n\n    const deletePost = (id) => {\n        changePosts(posts.filter((post => {\n            if(post.id !== id){\n                return post; //if this id is different to the other id's give me all that are different\n            }\n            return;//if it is the same don't give me nothing (delete it)\n        })))\n        return;\n    }\n\n    const deleteAlert = () => {\n        Swal.fire({\n            title: 'Are you sure?',\n            text: 'This post is going to be deleted FOREVER.',\n            showCancelButton: true,\n            confirmButtonText: 'Cancel',\n            cancelButtonText: 'Yes, Delete',\n            cancelButtonColor: 'red',\n            confirmButtonColor: 'green',\n            icon: 'warning'\n        })\n        .then((result) =>{\n            if(result.dismiss === Swal.DismissReason.cancel){\n                Swal.fire({\n                    title: 'Your post has been deleted.',\n                    icon: 'error',\n                    showConfirmButton: false,\n                    showCancelButton: true,\n                    cancelButtonText: 'OK',\n                    cancelButtonColor: 'red',\n\n                }).then(() => deletePost(post.id))\n                deletePost(post.id)\n            }else if(result.isConfirmed){\n                Swal.fire({\n                    title: 'The post has NOT been deleted.',\n                    icon: 'success',\n                    confirmButtonColor: 'green',\n                })\n            }\n        })\n    }\n\n\n    return(\n        <>            \n            {newPost ? \n                    <div key={post.id} id=\"posts__container\" className=\"posts__container\">\n                    <SvgContainer>\n                    <FontAwesomeIcon \n                        icon={faTimes} \n                        color=\"red\" \n                        size=\"lg\" \n                        onClick={() => deleteAlert()}\n                    />\n                    <FontAwesomeIcon \n                        icon={faEdit} \n                        size=\"lg\"\n                        onClick={() => editNewPost(!newPost)}\n                    />\n                    </SvgContainer>\n                        <form className=\"editing_container\" action=\"\" onSubmit={editPostOnSubmit}>\n                            <p>Author and date cannot be modified.</p>\n                            <label className=\"editing-label\" htmlFor=\"editing-title\">New title</label>\n                            <input\n                                name=\"editing-title\"\n                                className=\"editing_input\"\n                                type=\"text\"\n                                value={editingTitle}\n                                onChange={(e) => editPostOnChange(e)}\n                                placeholder=\"New Title\"\n                            />\n\n                            <label className=\"editing-label\" htmlFor=\"editing-text\">New Text</label>\n                            <input \n                                name=\"editing-text\"\n                                className=\"editing_input\"\n                                type=\"text\" \n                                value={editingText}\n                                onChange={(e) => editPostOnChange(e)}\n                                placeholder=\"New Text\"\n                            />\n                            <button className=\"editing_input-button\" type=\"submit\">Confirm</button>\n                        </form>\n                </div>  \n            \n                : \n\n                <div key={post.id} id=\"posts__container\" className=\"posts__container\">\n                    <SvgContainer>\n                    <FontAwesomeIcon \n                        icon={faTimes} \n                        color=\"red\" \n                        size=\"lg\" \n                        onClick={() => deleteAlert()}\n                    />\n                    <FontAwesomeIcon \n                        icon={faEdit} \n                        size=\"lg\"\n                        onClick={() => editNewPost(!newPost)}\n                    />\n                    </SvgContainer>\n                    <h3>{post.title}</h3>\n                    <p>{post.date}</p>\n                    <h6>{post.author}</h6>\n                    <p>{post.text}</p>\n                </div>  \n            }    \n        </>\n    )\n}\n\nconst SvgContainer = styled.div`\n    display: flex;\n    justify-content: right;\n    position: absolute;\n    text-align: center;\n    right: 600px;\n    box-sizing: border-box;\n    margin: 0;\n    svg{\n        cursor: pointer;\n        margin: 0 10px;\n    }\n`\n\n\n\n\nexport default Posts;","import React from 'react'\nimport styled from 'styled-components'\nimport { v4 as uuidv4  } from 'uuid'\n\n\nconst PostsForm = ({posts, changePosts, title, changeTitle, text, changeText, author, changeAuthor}) => {\n    \n    var today = new Date();\n    var options = {\n          day: \"numeric\",\n          month: \"long\",\n          year: \"numeric\"\n    }\n    var sDay = today.toLocaleDateString(\"en-EN\", options);\n\n        const handleOnSubmit = (e) => {\n            e.preventDefault()\n            if(title.length === 0 || text.length === 0 || author.length === 0){\n                return;\n            }\n                    changePosts([...posts,\n                        {\n                            id: uuidv4(),\n                            title: title,\n                            text: text,\n                            author: author,\n                            date: sDay\n                        }\n                    ])\n            changeTitle('')\n            changeText('')\n            changeAuthor('')\n        }\n\n        const handleOnChange = (e) => {\n            switch(e.target.name){\n                case 'title': \n                    changeTitle(e.target.value)\n                    break;\n                case 'text':\n                    changeText(e.target.value)\n                    break;\n                case 'author':\n                    changeAuthor(e.target.value)\n                    break;\n                default:\n                    alert('Valor no encontrado')\n            }\n        }\n\n\n    return(\n        <div>\n            <StyledForm action=\"\" onSubmit={handleOnSubmit}>               \n                <InputFormContainer>\n                    <label htmlFor=\"title\">Title: </label>\n                    <StyledInputsForPosts \n                        type=\"text\"\n                        name=\"title\" \n                        id=\"title\"\n                        value={title}                        \n                        onChange={(e) => handleOnChange(e)}\n                        placeholder=\"Title\"\n                    />\n                </InputFormContainer>\n                <InputFormContainer>\n                    <label htmlFor=\"text\">Text: </label>\n                    <StyledInputsForPosts \n                        type=\"text\" \n                        name=\"text\"\n                        id=\"text\"\n                        value={text}\n                        onChange={(e) => handleOnChange(e)}\n                        placeholder=\"Text\"\n                        text\n                    />\n                </InputFormContainer>\n                <InputFormContainer>\n                    <label htmlFor=\"author\">Author: </label>\n                    <StyledInputsForPosts \n                        type=\"text\" \n                        name=\"author\"\n                        id=\"author\"\n                        value={author}\n                        onChange={(e) => handleOnChange(e)}\n                        placeholder=\"Author\"\n                    />\n                        <br />\n\n                    <button className=\"submit__button\" type=\"submit\">                        \n                        Upload Post\n                    </button>\n                </InputFormContainer>    \n            </StyledForm>\n        </div>\n    )\n}\n\nconst StyledForm = styled.form`\n    display: flex;\n    flex-direction: column;\n    width: 50%;\n    text-align: left;\n    font-size: 28px;\n    font-family: Arial, Helvetica, sans-serif;\n    font-weight: 900;\n`\nconst InputFormContainer = styled.div`\n    margin: 10px;\n    label{\n        font-size: 22px;\n    }\n`\nconst StyledInputsForPosts = styled.input`\n    outline: none;\n    background-color: rgba(210, 255, 210,0.8);\n    border: 0;\n    border-bottom: 2px solid black;\n    font-size: ${props => props.text ? '14px' : '16px'};\n    width: 100%;\n    height: 40px;\n    margin: 0 0 20px 0;\n    &::placeholder{\n        font-size: 18px;\n        padding-left: 5px;\n    }\n`\nexport default PostsForm","import React, {useState, useEffect} from 'react'\nimport Header from './components/Header';\nimport Posts from './components/Posts';\nimport PostsForm from './components/PostsForm';\n\n\nconst App = () => {\n\n  const [title, changeTitle] = useState('')\n  const [text, changeText] = useState('')\n  const [author, changeAuthor] = useState('')\n\n  const savedPosts = localStorage.getItem('posts') ? JSON.parse(localStorage.getItem('posts')) : []\n  const [posts, changePosts] = useState(savedPosts)\n\n    useEffect(() => {\n        localStorage.setItem('posts', JSON.stringify(posts))\n      }, [posts])\n      \n      console.log(posts)\n\n  return (\n      <div className= \"App\">\n        <Header/>\n        <PostsForm \n            posts={posts} \n            changePosts={changePosts}\n            title={title}\n            changeTitle={changeTitle}\n            text={text}\n            changeText={changeText}\n            author={author}\n            changeAuthor={changeAuthor}\n        />\n  {posts.length > 0  ? posts.map(post => {\n    return(\n      <Posts \n        posts={posts}\n        post={post} \n        changePosts={changePosts}\n        title={title}\n        changeTitle={changeTitle}\n        text={text}\n        changeText={changeText}\n        author={author}\n        changeAuthor={changeAuthor}\n        />\n      )\n  })    \n  :    \n  <>\n    <h1>\n      There are no posts here!\n      You can create one whenever you want to.\n    </h1>\n  </>\n  }\n      </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}